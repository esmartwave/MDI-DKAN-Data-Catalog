<?php

/**
 * @file
 * Custom elements for datasets.
 */

include_once 'dkan_dataset.features.inc';
include_once 'dkan_dataset.theme.inc';
// TODO: make optional through admin settings.
include_once 'dkan_dataset.forms.inc';

/**
 * Implements hook_menu().
 */
function dkan_dataset_menu() {
  $path = drupal_get_path('module', 'dkan_datset');
  $items['node/%node/resource'] = array(
    'title' => 'Add Resoure',
    'page callback' => 'dkan_dataset_add_resource',
    'page arguments' => array(1),
    'access callback' => 'dkan_dataset_add_resource_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dkan_dataset.pages.inc',
    'file path' => $path,
  );
  $items['node/%node/dataset'] = array(
    'title' => 'Back to dataset',
    'page callback' => 'dkan_dataset_back',
    'page arguments' => array(1),
    'access callback' => 'dkan_dataset_back_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dkan_dataset.pages.inc',
    'file path' => $path,
  );

  return $items;
}

/**
 * Implements hook_node_view().
 */
function dkan_dataset_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && $node->type == 'dataset') {

    $node->content['resources'] = array(
      '#type' => 'item',
      '#theme' => 'dkan_dataset_resource_view',
      '#node' => $node,
      '#enabled' => TRUE,
      '#title' => t('Data and Resources'),
      '#label_display' => 'above',
      '#prefix' => '<div id="data-and-resources">',
      '#suffix' => '</div>',
      '#view_mode' => $view_mode,
    );
    $node->content['resources']['#attached']['css'][] = drupal_get_path('module', 'dkan_dataset') . '/dkan_dataset.css';
    $node->content['release_date'] = array(
      '#theme' => 'dkan_dataset_release_date_view',
      '#node' => $node,
      '#enabled' => TRUE,
      '#title' => t('Release Date'),
      '#label_display' => 'above',
      '#items' => array(),
      '#field_name' => '',
      '#field_type' => '',
      '#bundle' => $node->type,
      '#view_mode' => $view_mode,
    );
    $node->content['modified_date'] = array(
      '#theme' => 'dkan_dataset_modified_date_view',
      '#node' => $node,
      '#enabled' => TRUE,
      '#title' => t('Modified Date'),
      '#label_display' => 'above',
      '#items' => array(),
      '#field_name' => '',
      '#field_type' => '',
      '#bundle' => $node->type,
      '#view_mode' => $view_mode,
    );
    $node->content['identifier'] = array(
      '#theme' => 'dkan_dataset_identifier_view',
      '#node' => $node,
      '#enabled' => TRUE,
      '#title' => t('Identifier'),
      '#label_display' => 'above',
      '#items' => array(),
      '#field_name' => '',
      '#field_type' => '',
      '#bundle' => $node->type,
      '#view_mode' => $view_mode,
    );
  }
  elseif ($view_mode == 'teaser' && ($node->type == 'dataset' || $node->type == 'resource')) {
    if (isset($node->content['links']['node']['#links']['node-readmore'])) {
      unset($node->content['links']['node']['#links']['node-readmore']);
    }
    $node->content['body']['#weight'] = '-10';
    $node->content['resources'] = array(
      '#type' => 'item',
      '#theme' => 'dkan_dataset_resource_teaser_view',
      '#node' => $node,
      '#enabled' => TRUE,
      '#title' => '',
      '#label_display' => 'above',
      '#prefix' => '<div class="data-and-resources">',
      '#suffix' => '</div>',
      '#weight' => '20',
    );
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function dkan_dataset_field_extra_fields() {
  $extra['node']['dataset'] = array(
    'form' => array(
      'resources' => array(
        'label' => t('Data and Resources'),
        'description' => t('Shows book children of dataset'),
        'weight' => 0,
      ),
      'release_date' => array(
        'label' => t('Release Date'),
        'description' => t('Node published date available as a field'),
        'weight' => 0,
      ),
      'modified_date' => array(
        'label' => t('Modified Date'),
        'description' => t('Node changed date available as a field'),
        'weight' => 0,
      ),
      'identifier' => array(
        'label' => t('Identifier'),
        'description' => t('Unique identifier for dataset'),
        'weight' => 0,
      ),
    ),
    'display' => array(
      'resources' => array(
        'label' => t('Data and Resources'),
        'description' => t('Shows book children of dataset'),
        'weight' => 0,
      ),
      'release_date' => array(
        'label' => t('Release Date'),
        'description' => t('Node published date available as a field'),
        'weight' => 0,
      ),
      'modified_date' => array(
        'label' => t('Modified Date'),
        'description' => t('Node changed date available as a field'),
        'weight' => 0,
      ),
      'identifier' => array(
        'label' => t('Identifier'),
        'description' => t('Unique identifier for dataset'),
        'weight' => 0,
      ),
    ),
  );

  return $extra;
}

/**
 * Helper to get Resource nodes linked to a Dataset.
 */
function dkan_dataset_get_resource_nodes($nid) {
  $nodes = array();
  $nids = array();
  $query = new EntityFieldQuery();

  $results = $query
    ->entityCondition('entity_type', 'node')
    ->fieldCondition('field_dataset_ref', 'target_id', $nid, '=')
    ->execute();

  if ($results) {
    foreach ($results as $node) {
      foreach ($node as $nid => $obj) {
        $nids[] = $nid;
      }
    }
  }
  $nodes = isset($nids) ? node_load_multiple($nids) : array();
  return $nodes;
}

/**
 * Helper to get title from nid.
 */
function dkan_dataset_get_title($nid) {
  $result = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('nid', $nid, '=')
    ->execute()
    ->fetchAssoc();

  if (isset($result['title'])) {
    return $result['title'];
  }
  else {
    return FALSE;
  }
}

/**
 * Returns trimmed text using views_trim_text().
 */
function dkan_dataset_text_trim($title, $number = 25) {
  $alter = array(
    'max_length' => $number,
    'ellipsis' => TRUE,
    'word_boundary' => TRUE,
    'trim' => TRUE,
  );
  return views_trim_text($alter, $title);
}

/**
 * Implements hook_libraries_info().
 */
function dkan_dataset_libraries_info() {
  $libraries['slugify'] = array(
    'name' => 'Slugify',
    'vendor url' => 'https://github.com/pmcelhaney/jQuery-Slugify-Plugin',
    'download url' => 'https://github.com/pmcelhaney/jQuery-Slugify-Plugin/archive/master.zip',
    'files' => array('js' => array('jquery.slugify')),
    'version' => 'master',
  );

  return $libraries;
}

/**
 * Creates the part on the node edit form that says what stage you are on.
 */
function dkan_form_create_stages($op, $dataset_nid = NULL, $resource_nid = NULL) {
  // TODO: should be theme function.
  $stages = '<div id="dkan-stages">';
  if ($op == 'resource-edit' || $op == 'resource-create') {
    $stages .= '<ol class="stages stage-3">
      <li class="first complete">
          <button class="highlight" name="save" value="go-dataset" type="submit">' . l(t('Edit dataset'), 'node/' . $dataset_nid . '/edit') . '</button>
      </li>
      <li class="middle active">
          <span class="highlight">Add data</span>
      </li>
      <li class="last uncomplete">
          <button class="highlight" name="save" value="go-metadata" type="submit">' . l(t('Additional data'), 'node/' . $dataset_nid . '/edit', array('query' => array('additional' => TRUE))) . '</button>
      </li>
    </ol>';
  }
  if ($op == 'dataset-additional') {
    $stages .= '<ol class="stages stage-3">
      <li class="first complete">
          <button class="highlight" name="save" value="go-dataset" type="submit">' . l(t('Edit dataset'), 'node/' . $dataset_nid . '/edit') . '</button>
      </li>
      <li class="middle complete">
          <button class="highlight" name="save" value="go-dataset" type="submit">' . l(t('Add dataset'), 'node/add/resource', array('query' => array('dataset' => $dataset_nid))) . '</button>
      </li>
      <li class="last active">
          <button class="highlight" name="save" value="go-metadata" type="submit">' . l(t('Additional data'), 'node/' . $dataset_nid . '/edit', array('query' => array('additional' => TRUE))) . '</button>
      </li>
    </ol>';
  }
  if ($op == 'dataset-create') {
    $stages .=
        '<ol class="stages stage-1">
          <li class="first active">
            <span class="highlight">' . t('Create dataset') . '</span>
          </li>
          <li class="middle uncomplete">
            <span class="highlight">' . t('Add data') . ' </span>
          </li>
          <li class="last uncomplete">
            <span class="highlight">' . t('Additional data') . '</span>
          </li>
        </ol>';
  }
  if ($op == 'dataset-edit') {
    $stages .= '<ol class="stages stage-1">
        <li class="first active">
            <span class="highlight">' . t('Create dataset') . '</span>
      </li>
      <li class="middle complete">
          <span class="highlight">' . l(t('Add data'), 'node/add/resource', array('query' => array('dataset' => $dataset_nid))) . '</span>
      </li>
      <li class="last complete">
          <button class="highlight" name="save" value="go-metadata" type="submit">' . l(t('Additional data'), 'node/' . $dataset_nid . '/edit', array('query' => array('additional' => TRUE))) . '</button>
      </li>
    </ol>';
  }
  $stages .= '</div>';
  return $stages;
}

/**
 * Access callback for back link.
 */
function dkan_dataset_back_access($node) {
  if ($node->type != 'resource') {
    return FALSE;
  }
  else {
    return node_access('view', $node);
  }
}

/**
 * Access callback for 'Add Resource' tab.
 */
function dkan_dataset_add_resource_access($node) {
  if ($node->type != 'dataset') {
    return FALSE;
  }
  else {
    return _node_add_access();
  }
}

/**
 * Implements theme__preprocess_views_views_json_style_simple().
 */
function dkan_dataset_preprocess_views_views_json_style_simple(&$vars) {
  // Adds node values to list of resources.
  if ($vars['view']->name == 'dkan_dataset_resources_json') {
    $view = views_get_view('dkan_dataset_json');
    $view->preview(4);
    $renderer = $view->style_plugin->row_plugin;
    foreach ($view->field as $field) {
      $vars['rows'][check_plain($field->options['label'])] = filter_xss($field->original_value);
    }
  }
}
